---
title: "02_willow"
format: html
editor: visual
---

## 02_Willow

Time and distance removal model

```{r clear space}
# Clean your workspace to reset your R environment
rm( list = ls() )
# Check that you are in the right project folder
getwd()
```

## Library

```{r library}

library(tidyr)
library(dplyr)
library(unmarked)

```

## Load data

```{r load data}

# WIPT male count data:
all.obs <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/all_obs_17Oct23.csv")
all.obs <- all.obs[,-c(1)]

all.obs$exact_distance[all.obs$species != "WIPT"] <- NA
  

wipt.only <- filter(all.obs, species == "WIPT")

# adjust these labels so sex matches number observed
wipt.only[247, 10] = "MMMF"
wipt.only[249, 10] = "MMF"

#remove single F and single U

males <- filter(wipt.only, sex != "F")
males2 <- filter(males, sex != "U")


males2$sex[males2$sex == "M,F"] <- "MF"
males2$sex[males2$sex == "F,M"] <- "MF"
males2$sex[males2$sex == "M,2U"] <- "MUU"


# remove females from grouped counts
males2$count <- as.numeric(males2$count)
males2$sex <- as.factor(males2$sex)

#MF
males2$count[males2$sex == "MF"] <- males2$count[males2$sex == "MF"] - 1

#MMF
males2$count[males2$sex == "MMF"] <- males2$count[males2$sex == "MMF"] - 1

#MMMF
males2$count[males2$sex == "MMMF"] <- males2$count[males2$sex == "MMMF"] - 1

#MUU
males2$count[males2$sex == "MUU"] <- males2$count[males2$sex == "MUU"] - 2


# now take only columns needed then uncount groups

males3 <- males2[,c(1,4,5,8)]

males4 <- males3 %>%
   uncount(count)

# fix values that were NA but distances were given in the distance_category column
males4[113,3] <- 200
males4[218,3] <- 400
males4[220,3] <- 400
males4[222,3] <- 200


males5 <- data.frame(males4)
write.csv(males4, "E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/wiptmalesonly_timeanddist_19Oct23.csv")



##############################

env.s <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/wipt_male_df_timeanddist_18Oct23.csv")

```

## Create unmarkedFrameGDR

### Distance Matrix

```{r distance matrix}

# create a separate df to manipulate for distance data
males6 <- data.frame(males5)

# now i need to get exact distances to 'binned data'


my.bins <- seq(0, 400, by = 50)

males6$distance_bin <- cut(males6$exact_distance, breaks = my.bins, include.lowest = TRUE)

# add empty sites (sites that had no WIPT male observations)

# first figure out what sites are missing
obs.ids <- as.data.frame(males6$id)
all.ids <- as.data.frame(env.s$id)

missing_df <- as.data.frame(setdiff(all.ids$`env.s$id`, obs.ids$`males6$id`))
colnames(missing_df)[1] <- "id" # change the name of the first column to 'id'

# now need to create dataframe that attaches empty sites to end of sites where ptarmigan were observed so i can then match those 'levels' of sites to the data frame of only observed. It make sure the formatting code knows there are sites where ptarmigan weren't observed. But the empty sites need to be attached to the end of the observed sites in an actual dataframe and then those levels matched to the observed dataframe as 'ghost' levels or else the order will be messed up and it will put the 'observed' ptarmigan into sites that were actually empty.

# so say the observed dataframe is df.obs = 'a, b, a, c, c, d' and you also had a site 'e' that was empty that you want to add to the levels. so a dataframe with all sites/levels, df.allsites = 'a, b, c, d, e'

# if you were to try and match the levels like 'levels(df.obs$id) <- levels(df.allsites$id) it would change the order of the observed sites to 'a, b, c, d, e' so then e would be matched up with a row that has an observation. you need to create a df that matches the same pattern of repeated site observations then add all the missing ones at the end: df.match = 'a, b, a, c, c, d, e' so then when you match them up the first sequence of 'a, b, a, c, c, d' matches up, then e is put at the end with empty values


# create my empty data frame I'm going to attach

num_columns <- 4 # define number of columns
num_rows <- 738 #define number of rows(the number of empty sites I'm adding)
col_names <- colnames(males6) # define what column names will be (the same as the frame i'm binding too)

# create the dataframe wtih my specifications
my_df <- data.frame(matrix(0, nrow = num_rows, ncol = num_columns))

# and add column names
colnames(my_df) <- col_names

# and replace 'id' column with names of all empty sites
my_df$id <- missing_df$id

# need to 'add' missing factor levels to the dataframe I'll actually be putting into the formatting code (creates 'ghost' sites for all empty sites)


males6$id <- as.factor(males6$id)
my_df$id <- as.factor(my_df$id)

levels(males6$id) <- c(levels(males6$id), levels(my_df))
levels(males6$id) # should be 988

########### format distance data for frame########
#make my bin breaks into a list so i can just put the object into the formatting insteading having to list them all out
my.bin.list <- as.list(my.bins)

# format distance data for the unmarkedFrameGDR:
yDist <- formatDistData(males6, distCol = "exact_distance", transectNameCol = "id", dist.breaks = my.bin.list)


sum(yDist)

```

### Time Removal Matrix

```{r time try 2}

# can use same dataframe but just specify its for the time-intervals

yRem <- formatDistData(males6, distCol = "time_int", transectNameCol = "id", dist.breaks = c(0, 2, 4, 6, 8, 10))

sum(yRem) # make sure its 485
```

### full Frame

```{r unmarkedFrameGDR}

# not sure if this makes a difference but put env covs in same order as yDist and yRem

ydist.df <- data.frame(yDist)
# Extract the row names of the matrix
row_names <- rownames(ydist.df)

# Add the row names as a new column in the dataframe
ydist.df$id <- row_names

# make sure both are factors
ydist.df$id <- as.factor(ydist.df$id)
env.s$id <- as.factor(env.s$id)

??left_join
covs <- full_join(ydist.df, env.s, by = 'id')


# site covariates
siCovs <- covs[,c(9, 16:30)]
siCovs$id <- as.factor(siCovs$id)

# in the frame these are actually the yearlySiteCovs
oCovs <- covs[,c(9, 31:43)]
oCovs$id <- as.factor(oCovs$id)
oCovs$observer <- as.factor(oCovs$observer)

breaks <- seq(0, 400, by = 50)





umfGDR <- unmarkedFrameGDR(yDistance = yDist, yRemoval = yRem, numPrimary = 1, siteCovs = siCovs, obsCovs = NULL, yearlySiteCovs = oCovs, dist.breaks = breaks, unitsIn = 'm', period.lengths = NULL)


saveRDS(umfGDR, "unmarkedFrameGDR_wiptmale_20oct23.rds")



```

## Distance Removal Model: Zero Inflated Poisson (ZIP)

```{r gdr zip model}










```
