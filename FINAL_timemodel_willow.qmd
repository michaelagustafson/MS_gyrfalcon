---
title: "FINAL_timemodel_willow"
format: docx
editor: visual
---

```{r}
# Clean your workspace to reset your R environment
rm( list = ls() )
# Check that you are in the right project folder
getwd()
```

## Library

```{r}
library(unmarked)
library(raster)
library(dplyr)
library(ggplot2)
library(here)
```

## Import data

```{r}
allCovs_std <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/si_obs_covs_scaled_16nov23.csv")

colnames(allCovs_std)[27] <- "elev"
```

```{r}

timeFrame <- unmarkedFrameMPois(
  # import time removal columns(counts):
  y = allCovs_std[,c(2:6)], 
  siteCovs = data.frame(allCovs_std), 
  # define pifun type: 
  type = "removal" )
# fit models: multinomPois order of formulas: detection, abundance

time.model <- multinomPois( ~ 1 + julian + min_after_sun + wind + observer ~ 1 + tundra + tussock + tallshrub + elev + offset(log(area)), data = timeFrame)


summary(time.model)
confint(time.model, type = "state")
confint(time.model, type = "det")

```

## Prediction Maps

```{r}
# Import already scaled (by 2 std dev) rasters


elev <- raster("E:/gyrf_analysis/MSgyrfalcon/dem_800.tif")

tallshrub <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tallshrub.tif")

tundra <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tundra.tif")

tussock <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tussock.tif")


area.raster <- elev 
values(area.raster) <- 800*800/10000 # area of a grid pixel, divided by 10000 to standardize

# pull scaled (by 2 std dev) observation/yearlySite covs from dataframe

jul.raster <- elev # create a raster using one thats already in correct crs/scale
values(jul.raster) <- mean(allCovs_std$julian) # replace data with that of what you want - doing it with the mean scaled value of obs covs

wind.raster <- elev 
values(wind.raster) <- mean(allCovs_std$wind)

minsun.raster <- elev 
values(minsun.raster) <- mean(allCovs_std$min_after_sun)

obs.raster <- elev 
values(obs.raster) <- as.factor("DS") # "DS" is the intercept



pred.surface <- stack(tundra, tussock, tallshrub, elev, area.raster, jul.raster, wind.raster, minsun.raster, obs.raster)

names(pred.surface) <- c("tundra", "tussock", "tallshrub", "elev", "area", "julian", "wind", "min_after_sun", "observer")
```

```{r}
time.prediction <- predict(time.model, type = "state", newdata = pred.surface) 

plot(time.prediction) 

#look at some stats
cellStats(time.prediction, "sum") # 18954 total abundance
cellStats(time.prediction, "min") # minimum density of 0.003 males/km2
cellStats(time.prediction, "max") # maximum density of 3.45 males/km2

writeRaster(time.prediction, filename = names(time.prediction), bylayer = TRUE, format = "GTiff", overwrite = TRUE)
```

## Partial Prediction Plots

```{r}
# Estimate partial prediction plots for predictors with 95% CIs not overlapping zero:

# Start by creating our datasets to predict over

# how many values do we use:
n <- 100

# Use the observed values to define our range:


```
