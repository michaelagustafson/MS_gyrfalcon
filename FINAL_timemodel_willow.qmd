---
title: "FINAL_timemodel_willow"
format: docx
editor: visual
---

```{r}
# Clean your workspace to reset your R environment
rm( list = ls() )
# Check that you are in the right project folder
getwd()
```

## Library

```{r}
library(unmarked)
library(raster)
library(dplyr)
library(ggplot2)
library(here)
```

## Import data

```{r}
allCovs_std <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/si_obs_covs_scaled_16nov23.csv")

colnames(allCovs_std)[27] <- "elev"
```

```{r}

timeFrame <- unmarkedFrameMPois(
  # import time removal columns(counts):
  y = allCovs_std[,c(2:6)], 
  siteCovs = data.frame(allCovs_std), 
  # define pifun type: 
  type = "removal" )
# fit models: multinomPois order of formulas: detection, abundance

time.model <- multinomPois( ~ 1 + julian + min_after_sun + wind + observer ~ 1 + tundra + tussock + tallshrub + elev + offset(log(area)), data = timeFrame)


summary(time.model)
confint(time.model, type = "state")
confint(time.model, type = "det")

```

## Prediction Maps

```{r}
# Import already scaled (by 2 std dev) rasters


elev <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/elev_std.tif")

tallshrub <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tallshrub.tif")

tundra <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tundra.tif")

tussock <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tussock.tif")


area.raster <- elev 
values(area.raster) <- 800*800/10000 # area of a grid pixel, divided by 10000 to standardize

# pull scaled (by 2 std dev) observation/yearlySite covs from dataframe

jul.raster <- elev # create a raster using one thats already in correct crs/scale
values(jul.raster) <- mean(allCovs_std$julian) # replace data with that of what you want - doing it with the mean scaled value of obs covs

wind.raster <- elev 
values(wind.raster) <- mean(allCovs_std$wind)

minsun.raster <- elev 
values(minsun.raster) <- mean(allCovs_std$min_after_sun)

obs.raster <- elev 
values(obs.raster) <- as.factor("DS") # "DS" is the intercept



pred.surface <- stack(tundra, tussock, tallshrub, elev, area.raster, jul.raster, wind.raster, minsun.raster, obs.raster)

names(pred.surface) <- c("tundra", "tussock", "tallshrub", "elev", "area", "julian", "wind", "min_after_sun", "observer")
```

```{r}
time.prediction <- predict(time.model, type = "state", newdata = pred.surface) 

plot(time.prediction) 

#look at some stats
cellStats(time.prediction, "sum") # 55 431 total abundance
cellStats(time.prediction, "min") # minimum density of 0.26 males/km2
cellStats(time.prediction, "max") # maximum density of 5.08 males/km2

writeRaster(time.prediction, filename = names(time.prediction), bylayer = TRUE, format = "GTiff", overwrite = TRUE)
```

## Partial Prediction Plots

```{r}

raw_vals <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/raw_hab_vals.csv")
raw_vals$raw_elev <- as.numeric(raw_vals$raw_elev)
raw_vals <- na.omit(raw_vals)

standardise <- function( xmat, stdevs = 2, marg = c( 1, 2) ) { 
  mean.xmat = mean( as.vector( xmat ), na.rm = TRUE )
  sd.xmat = sd( as.vector( xmat ), na.rm = TRUE ) 
  std.xmat = apply( xmat, marg, function( x ){
    ( x - mean.xmat ) / (stdevs * sd.xmat ) } )
  return( std.xmat )
}


# Estimate partial prediction plots for predictors with 95% CIs not overlapping zero:

# Start by creating our datasets to predict over

# how many values do we use:
n <- 100

# Use the observed values to define our range:

# import unscaled predictors
#env <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/final_env_join_18Oct23.csv")

elevation.pp <- seq( min( raw_vals[,19]),max(500),
                   length.out = n )

tallshrub.pp <- seq( min( raw_vals[,"tallshrub"]),max( raw_vals[,"tallshrub"]),
                   length.out = n )

tundra.pp <- seq( min( raw_vals[,"tundra"]),max( raw_vals[,"tundra"]),
                   length.out = n )

tussock.pp <- seq( min( raw_vals[,"tussock"]),max( raw_vals[,"tussock"]),
                   length.out = n )

#standardize predictors:

area.x = (pi*400*400)/10000

elevation.std <- standardise(as.matrix(elevation.pp))
tallshrub.std <- standardise(as.matrix(tallshrub.pp))
tundra.std <- standardise(as.matrix(tundra.pp))
tussock.std <- standardise(as.matrix(tussock.pp))


```

### Tundra

```{r}
tundData <- data.frame( tundra = tundra.std, tussock = 0, tallshrub = 0, elev = 0, area = area.x )

#predict partial relationship:
tun.t <- predict( time.model, type = "state", newdata = tundData, 
                          appendData = TRUE )

### plot

tund.t <- cbind( tun.t[,c("Predicted", "lower", "upper") ], tundra.pp ) %>%
  # define x and y values
  ggplot(., aes( x = tundra.pp, y = Predicted ) ) + 
  #choose preset look
  ylim(0, 6) +
  theme_classic( base_size = 30) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  # add labels
  labs( x = "Tundra", y = "Relative density (males/kmsq)" ) +
  # add band of confidence intervals
  theme(text=element_text(size=65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "lightblue3" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkblue")
tund.t

ggsave("E:/gyrf_analysis/FINAL time pprediction plots 17Nov23/wipt_tundra.png", width = 20, height = 15, dpi = 300, limitsize = FALSE)


```

### Tussock

```{r}
tussData <- data.frame( tundra = 0, tussock = tussock.std, tallshrub = 0, elev = 0, area = area.x )

#predict partial relationship:
tuss.t <- predict( time.model, type = "state", newdata = tussData, 
                          appendData = TRUE )


### plot

t.tuss <- cbind( tuss.t[,c("Predicted", "lower", "upper") ], tussock.pp ) %>%
  # define x and y values
  ggplot(., aes( x = tussock.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 30) +
  # add labels
  ylim(0, 6) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  labs( x = "Tussock", y = "Relative density (males/kmsq)" ) +
  # add band of confidence intervals
  theme(text=element_text(size=65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "lightblue3" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkblue" )
#view
t.tuss

ggsave("E:/gyrf_analysis/FINAL time pprediction plots 17Nov23/wipt_tussock.png", width = 20, height = 15, dpi = 300, limitsize = FALSE)
```

### Tallshrub

```{r}
#| echo: false
tallData <- data.frame( tundra = 0, tussock = 0, tallshrub = tallshrub.std, elev = 0, area = area.x )

#predict partial relationship:
tall.t <- predict( time.model, type = "state", newdata = tallData, 
                          appendData = TRUE )


### plot

t.tall <- cbind( tall.t[,c("Predicted", "lower", "upper") ], tallshrub.pp ) %>%
  # define x and y values
  ggplot(., aes( x = tallshrub.pp, y = Predicted ) ) + 
  #choose preset look
  ylim(0, 6) +
  theme_classic( base_size = 30 ) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  # add labels
  labs( x = "Tall shrub", y = "Relative density (males/kmsq)" ) +
  # add band of confidence intervals
  theme(text=element_text(size= 65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "lightblue3" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkblue" )
#view
t.tall

ggsave("E:/gyrf_analysis/FINAL time pprediction plots 17Nov23/wipt_tallshrub.png", width = 20, height = 15, dpi = 300, limitsize = FALSE)
```

### Elevation

```{r}
elevData <- data.frame( tundra = 0, tussock = 0, tallshrub = 0, elev = elevation.std, area = area.x )

#predict partial relationship:
pred.elev.t <- predict(time.model, type = "state", newdata = elevData, 
                          appendData = TRUE )


### plot

elev.t <- cbind( pred.elev.t[,c("Predicted", "lower", "upper") ], elevation.pp ) %>%
  # define x and y values
  ggplot(., aes( x = elevation.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 30) +
  # add labels
  ylim(0, 6) +
  labs( x = "Elevation (m)", y = "Relative density (male/kmsq)" ) +
  theme(text=element_text(size=65)) +
    # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "lightblue3" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkblue" )


#view
elev.t

ggsave("E:/gyrf_analysis/FINAL time pprediction plots 17Nov23/wipt_elev.png", width = 20, height = 15, dpi = 300, limitsize = FALSE)
```
