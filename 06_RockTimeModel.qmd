---
title: "05_WillowTimeModel"
format: html
editor: visual
---

# Rock Ptarmigan Time Removal Model

## Clear workspace

```{r}
# Clean your workspace to reset your R environment
rm( list = ls() )
# Check that you are in the right project folder
getwd()
```

## Library

```{r}
library(unmarked)
library(raster)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(AICcmodavg)
```

## Import data

```{r}
allCovs_std <- read.csv("E:/gyrf_analysis/MSgyrfalcon/ropt_final_df_28Dec23.csv")
allCovs_std <- allCovs_std[,c(-1)]
```

## Set area

Add as a column to the dataframe

```{r}
# the surveyed area was a 400 m radius circle

allCovs_std$area <- 400^2*pi/10000

```

## Model Frame

```{r}
timeFrame <- unmarkedFrameMPois(
  # import time removal columns(counts):
  y = allCovs_std[,c(2:6)], 
  siteCovs = data.frame(allCovs_std), 
  # define pifun type: 
  type = "removal" )
# fit models: multinomPois order of formulas: detection, abundance

```

## Time Removal Model

```{r}
time.model <- multinomPois( ~ 1 + julian + min_after_sun + wind + observer ~ 1 + tundra + lowshrub + sparseveg + elev + offset(log(area)), data = timeFrame)


model_summary <- summary(time.model)
```

## Model Fit

```{r}
set.seed(1234)


#fit stats for NB model
fitstats.tm <- function(time.model) {
  observed <- getY(time.model@data)
  expected <- fitted(time.model)
  resids <- residuals(time.model)
  n.obs <- apply(observed,1,sum,na.rm=TRUE)
  n.pred <- apply(expected,1,sum,na.rm=TRUE)
  sse <- sum(resids^2, na.rm=TRUE)
  chisq <- sum((observed - expected)^2 / expected, na.rm=TRUE)
  freeTuke <- sum((sqrt(observed) - sqrt(expected))^2, na.rm=TRUE)
  freeTuke.n <- sum((sqrt(n.obs)-sqrt(n.pred))^2, na.rm=TRUE)
  sse.n <- sum( (n.obs-n.pred)^2, na.rm=TRUE)
  chisq.n <- sum((n.obs-n.pred)^2/expected, na.rm=TRUE)
  
  out <- c(SSE=sse, Chisq=chisq, freemanTukey=freeTuke, SSE.n=sse.n, Chisq.n=chisq.n, freemanTukey.n=freeTuke.n)
  return(out)
}

(gof.time.model <- parboot(time.model, fitstats.tm, nsim = 1000, report = 1))


print(gof.time.model)

# compute c-hat
chat.tm <- gof.time.model@t0[2]/mean(gof.time.model@t.star[,2])
chat.tm
```

## Prediction Maps

### Prediction surface

```{r}
# Import already scaled (by 2 std dev) rasters


elev <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/elev_std.tif")

lowshrub <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/lowshrub.tif")

tundra <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tundra.tif")

sparseveg <- raster("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/sparseveg.tif")

area.raster <- elev 
values(area.raster) <- 800*800/10000 # area of a grid pixel, divided by 10000 to standardize

# pull scaled (by 2 std dev) observation/yearlySite covs from dataframe

jul.raster <- elev # create a raster using one thats already in correct crs/scale
values(jul.raster) <- mean(allCovs_std$julian) # replace data with that of what you want - doing it with the mean scaled value of obs covs

wind.raster <- elev 
values(wind.raster) <- mean(allCovs_std$wind)

minsun.raster <- elev 
values(minsun.raster) <- mean(allCovs_std$min_after_sun)

obs.raster <- elev 
values(obs.raster) <- as.factor("DS") # "DS" is the intercept



pred.surface <- stack(tundra, lowshrub, sparseveg, elev, area.raster, jul.raster, wind.raster, minsun.raster, obs.raster)

names(pred.surface) <- c("tundra", "lowshrub", "sparseveg", "elev", "area", "julian", "wind", "min_after_sun", "observer")

```

### Predict

```{r}
time.prediction <- predict(time.model, type = "state", newdata = pred.surface) 

plot(time.prediction) 
plot(time.prediction, axes = FALSE, col=colorRampPalette(brewer.pal(3,"Greens"))(100))



#look at some stats
cellStats(time.prediction, "sum") # 4 041 total abundance
cellStats(time.prediction, "min") # minimum density of 0.003 males/800m2
cellStats(time.prediction, "max") # maximum density of 2.94 males/800m2
cellStats(time.prediction, "mean") # 0.15 males/800m2

writeRaster(time.prediction, filename = names(time.prediction), bylayer = TRUE, format = "GTiff", overwrite = TRUE)
```

## Partial Prediction Plots: Abundance

```{r}
raw_vals <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/raw_hab_vals.csv")
raw_vals$raw_elev <- as.numeric(raw_vals$raw_elev)
raw_vals <- na.omit(raw_vals)

standardise <- function( xmat, stdevs = 2, marg = c( 1, 2) ) { 
  mean.xmat = mean( as.vector( xmat ), na.rm = TRUE )
  sd.xmat = sd( as.vector( xmat ), na.rm = TRUE ) 
  std.xmat = apply( xmat, marg, function( x ){
    ( x - mean.xmat ) / (stdevs * sd.xmat ) } )
  return( std.xmat )
}


# Estimate partial prediction plots for predictors with 95% CIs not overlapping zero:

# Start by creating our datasets to predict over

# how many values do we use:
n <- 100

# Use the observed values to define our range:

# import unscaled predictors
#env <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/final_env_join_18Oct23.csv")

elevation.pp <- seq( min( raw_vals[,19]),max(500),
                   length.out = n )

lowshrub.pp <- seq( min( raw_vals[,"lowshrub"]),max( raw_vals[,"lowshrub"]),
                   length.out = n )

tundra.pp <- seq( min( raw_vals[,"tundra"]),max( raw_vals[,"tundra"]),
                   length.out = n )

sparseveg.pp <- seq( min( raw_vals[,"sparseveg"]),max( raw_vals[,"sparseveg"]),
                   length.out = n )

#standardize predictors:

area.x = (pi*400*400)/10000

elevation.std <- standardise(as.matrix(elevation.pp))
lowshrub.std <- standardise(as.matrix(lowshrub.pp))
tundra.std <- standardise(as.matrix(tundra.pp))
sparseveg.std <- standardise(as.matrix(sparseveg.pp))
```

### Tundra

```{r}
tundData <- data.frame( tundra = tundra.std, sparseveg = 0, lowshrub = 0, elev = 0, area = area.x )

#predict partial relationship:
tun.t <- predict( time.model, type = "state", newdata = tundData, 
                          appendData = TRUE )

### plot

tund.t <- cbind( tun.t[,c("Predicted", "lower", "upper") ], tundra.pp ) %>%
  # define x and y values
  ggplot(., aes( x = tundra.pp, y = Predicted ) ) + 
  #choose preset look
  ylim(0, 0.4) +
  theme_classic( base_size = 30) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  # add labels
  labs( x = "Tundra", y = "Relative density (males/800m2)" ) +
  # add band of confidence intervals
  theme(text=element_text(size=65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "darkseagreen" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkgreen")
tund.t
```

### Lowshrub

```{r}
lowData <- data.frame( tundra = 0, sparseveg = 0, lowshrub = lowshrub.std, elev = 0, area = area.x )

#predict partial relationship:
low.t <- predict( time.model, type = "state", newdata = lowData, 
                          appendData = TRUE )

### plot

lowshrub.t <- cbind( low.t[,c("Predicted", "lower", "upper") ], lowshrub.pp ) %>%
  # define x and y values
  ggplot(., aes( x = lowshrub.pp, y = Predicted ) ) + 
  #choose preset look
  ylim(0, 0.4) +
  theme_classic( base_size = 30) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  # add labels
  labs( x = "Low shrub", y = "Relative density (males/800m2)" ) +
  # add band of confidence intervals
  theme(text=element_text(size=65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "darkseagreen" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkgreen")
lowshrub.t
```

### Sparse vegetation

```{r}
sparseData <- data.frame( tundra = 0, sparseveg = sparseveg.std, lowshrub = 0, elev = 0, area = area.x )

#predict partial relationship:
sv.t <- predict( time.model, type = "state", newdata = sparseData, 
                          appendData = TRUE )

### plot

sparse.t <- cbind( sv.t[,c("Predicted", "lower", "upper") ], sparseveg.pp ) %>%
  # define x and y values
  ggplot(., aes( x = sparseveg.pp, y = Predicted ) ) + 
  #choose preset look
  ylim(0, 0.4) +
  theme_classic( base_size = 30) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  # add labels
  labs( x = "Sparse vegetation", y = "Relative density (males/800m2)" ) +
  # add band of confidence intervals
  theme(text=element_text(size=65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "darkseagreen" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkgreen")
sparse.t

```

### Elevation

```{r}
elevData <- data.frame( tundra = 0, sparseveg = 0, lowshrub = 0, elev = elevation.std, area = area.x )

#predict partial relationship:
elev.t <- predict( time.model, type = "state", newdata = elevData, 
                          appendData = TRUE )

### plot

elevation.t <- cbind( elev.t[,c("Predicted", "lower", "upper") ], elevation.pp ) %>%
  # define x and y values
  ggplot(., aes( x = elevation.pp, y = Predicted ) ) + 
  #choose preset look
  ylim(0, 0.4) +
  theme_classic( base_size = 30) +
  # add labels
  labs( x = "Elevation (m) ", y = "Relative density (males/800m2)" ) +
  # add band of confidence intervals
  theme(text=element_text(size=65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "darkseagreen" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkgreen")
elevation.t

```

## Partial Prediction Plots: Detection

```{r}

raw_det <- read.csv("E:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/data/all_env_FINAL.csv")
raw_det2 <- raw_det[,c(2:3, 5:6, 9)]

# Start by creating our datasets to predict over

# how many values do we use:
n <- 100


# Use the observed values to define our range:
julian.pp <- seq( min( raw_det2[,"julian"]),max(raw_det2[,"julian"]),
                   length.out = n )

wind.pp <- seq( min( raw_det2[,"wind"]),max( raw_det2[,"wind"]),
                   length.out = n )

wind.km <- wind.pp*1.60934

minsun.pp <- seq( min( raw_det2[,"min_after_sun"]),max( raw_det2[,"min_after_sun"]),
                   length.out = n )


#standardize predictors:
jul.std <- standardise(as.matrix( julian.pp ))
wind.std.km <- standardise(as.matrix(wind.km ))
minsun.std <- standardise(as.matrix( minsun.pp ))
area.x = pi*400*400/10000

```

### Observer

```{r}
# Observer effect
#combine standardized predictors into a new dataframe to predict partial relationship
# for abundance submodel:
detDataobs <- data.frame( observer = factor( c("DS", "KW","MG"), levels = c("DS", "KW","MG") ),
                       julian = 0, 
                       wind = 0, 
                       min_after_sun = 0)


#predict partial relationship:
pred.obs <- predict( time.model, type = "det", newdata = detDataobs, 
                          appendData = TRUE )



obsvp.det <- pred.obs %>%
  # define x and y values
  ggplot(., aes( x = observer, y = Predicted, color = observer ) ) + 
  #choose preset look
  theme_classic( base_size = 35 ) +
  #remove legend
  theme( legend.position = "none" ) +
  # add labels
  labs( x = "Observer", y = "Detection probability" ) +
  theme(text=element_text(size=75)) +
  #add mean detection for each observer
  geom_point( size = 15 ) +
  # add confidence intervals
  geom_errorbar( aes(ymin = lower, ymax = upper ), 
               size = 4, width = 0.3 ) +
  scale_color_manual(values=c('darkgreen','darkgreen','darkgreen')) +
  ylim(0,0.25)
#view
obsvp.det

```

### Julian

```{r}
detDatajul <- data.frame( observer = factor("DS", levels = c("DS", "KW","MG") ),
                       julian = jul.std, 
                       wind = 0, 
                       min_after_sun = 0)


#predict partial relationship:
pred.jul <- predict( time.model, type = "det", newdata = detDatajul, 
                          appendData = TRUE )

julp.det <- cbind( pred.jul[,c("Predicted", "lower", "upper") ], julian.pp ) %>%
  # define x and y values
  ggplot(., aes( x = julian.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 35 ) +
  # add labels
  labs( x = "Day of the year", y = "Detection probability" ) +
  theme(text=element_text(size=75)) +
  # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "darkseagreen" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkgreen" ) +
  ylim(0,0.9)
#view
julp.det


```

### Wind speed

```{r}
detDatawind <- data.frame( observer = factor("DS", levels = c("DS", "KW","MG") ),
                       julian = 0, 
                       wind = wind.std.km, 
                       min_after_sun = 0)


#predict partial relationship:
pred.wind <- predict( time.model, type = "det", newdata = detDatawind, 
                          appendData = TRUE )

windp.det <- cbind( pred.wind[,c("Predicted", "lower", "upper") ], wind.km ) %>%
  # define x and y values
  ggplot(., aes( x = wind.km, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 35 ) +
  # add labels
  labs( x = "Wind speed (kmph)", y = "Detection probability" ) +
  theme(text=element_text(size=75)) +
  # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "darkseagreen" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkgreen" ) +
  ylim(0,0.6)
#view
windp.det
```

### Minutes after sunrise

```{r}
detDatasun <- data.frame( observer = factor("DS", levels = c("DS", "KW","MG") ),
                       julian = 0, 
                       wind = 0, 
                       min_after_sun = minsun.std)


#predict partial relationship:
pred.sun <- predict(time.model, type = "det", newdata = detDatasun, 
                          appendData = TRUE )

sunp.det <- cbind( pred.sun[,c("Predicted", "lower", "upper") ], minsun.pp ) %>%
  # define x and y values
  ggplot(., aes( x = minsun.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 35 ) +
  # add labels
  labs( x = "Minutes after sunrise", y = "Detection probability" ) +
  theme(text=element_text(size=75)) +
  # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "darkseagreen" ) +
  # add mean line on top
  geom_line( size = 5, color = "darkgreen" ) +
  ylim(0,0.9)
#view
sunp.det
```
